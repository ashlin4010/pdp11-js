; Javascript PDP 11/70 Emulator v3.2
; written by Paul Nankervis
; Please send suggestions, fixes and feedback to paulnank@hotmail.com
;
; boot loader code
;mac/list:boot boot
;link/bot:120000 boot,odt11
;dump/noascii/start:120/out:tt: boot.sav

    .macro lda label,reg
    mov pc,reg
    add label-.,reg     ;load address relative (PIC)
    .endm

psw=177776
pir=177772
consol=177570

start:
    reset
    clr @#psw
    lda #start,sp
    add #20000,sp       ;put stack at end of current page

    lda #banner,r0
    jsr pc,print        ;print banner

    sub #256,sp         ;make room for cmd buffer
    mov sp,buffer

    jsr pc,getcmd       ;print prompt, start clock, read input...

    clr r0
20$:wait
    inc r0
    br 20$              ;idle loop

getcmd:
    lda #prompt,r0
    jsr pc,print        ;print cmd prompt

    mov buffer,bufptr   ;reset input buffer

    lda #inpast,r0
    mov r0,@#60
    mov #200,@#62
    movb #100,@#177560  ;set console input handler

    lda #clkast,r0
    mov r0,@#100
    mov #340,@#102
    movb #100,@#177546  ;ensure clock is ticking
    rts pc

clkcnt: .word 0
clkast:
    dec clkcnt
    mov clkcnt,@#consol ;tickle display register
    rtt

putchr:
    tstb @#177564
    bpl putchr
    movb r0,@#177566    ;write a character to console terminal
    rts pc

prtptr: .word 0
print:
    bitb #100,@#177564
    bne print           ;wait until terminal ie is not set
    mov r0,prtptr
    lda #prtast,r0
    mov r0,@#64
    mov #200,@#66
    mov #100,@#177564   ;set print in motion
    rts pc

prtast:
    tstb @prtptr        ;check for end of string
    beq 20$
    movb @prtptr,@#177566
    inc prtptr
    rtt
20$:clrb @#177564      ;turn off ie
    rtt

buffer: .word 0 ;input buffer location
bufptr: .word 0 ;input buffer pointer

inpast:
    mov r0,-(sp)
    mov r1,-(sp)
    movb @#177562,r0    ;get character
    cmpb r0,#40
    blt 30$             ;below space?
    cmpb r0,#127.
    bge 50$             ;above del? go test equality
    mov bufptr,r1
    sub buffer,r1
    cmp r1,#250
    bgt 90$             ;no room in buffer?
    jsr pc,putchr       ;echo the char
    cmpb r0,#97.
    blt 10$             ;less than lower 'a'
    cmpb r0,#122.
    bgt 10$             ;greater than lower 'z'
    bicb #40,r0         ;convert to upper case
10$:mov bufptr,r1
    movb r0,(r1)+       ;put character in buffer
    mov r1,bufptr
    br  90$

30$:cmpb r0,#15
    beq 80$             ;for carriage return do a command
    cmpb r0,#10
50$:bne 90$             ;is it <del> or back space
    cmp bufptr,buffer   ;any data to remove?
    blos 90$
    dec bufptr
    lda #del,r0         ;backspace to delete character
    jsr pc,print
    br 90$

80$:mov bufptr,r0
    clrb (r0)
    lda #cmd,r0
    mov r0,@#240
    mov #40,@#242
    mov #1000,@#pir     ;call cmd at priority 1 using pir

90$:mov (sp)+,r1        ;restore registers & exit
    mov (sp)+,r0
    rtt

cmd:
    clr @#pir           ; no more pir calls
    mov r0,-(sp)
    mov r1,-(sp)
    mov r2,-(sp)
    mov r3,-(sp)
    mov r4,-(sp)
    mov r5,-(sp)

    lda #eol,r0
    jsr pc,print

    mov buffer,r5       ;check cmd in buffer (it is uppercase only!)
20$:movb (r5)+,r4
    beq 90$             ;done if end
    cmp r4,#40
    beq 20$             ;skip spaces

    clr r3              ;command index
    lda #cmdlst,r0      ;command names

30$:movb (r0)+,r1       ;get first command table byte
    beq 80$             ;end so unknown cmd
    cmpb r1,r4
    bne 50$             ;if no match next command

    mov r5,r2
40$:movb (r2),r1        ;look at other command bytes
    beq  70$
    inc r2
    cmp r1,#40
    beq 70$
    tstb (r0)
    beq  50$
    cmpb r1,(r0)+       ;compare input byte with table
    beq 40$

50$:tstb (r0)+          ;find next table command
    bne 50$
    add #2,r3
    br 30$

70$:bitb #100,@#177564
    bne 70$             ;wait for printing before executing
    lda #cmdtbl,r0      ;execute command routine at r3 offset
    add r0,r3
    add (r3),r3
    jsr pc,(r3)
    br 90$

80$:lda #unkmsg,r0      ;unknown command
    jsr pc,print

90$:jsr pc,getcmd       ;print prompt, and ensure everything is running

    mov (sp)+,r5
    mov (sp)+,r4
    mov (sp)+,r3
    mov (sp)+,r2
    mov (sp)+,r1
    mov (sp)+,r0
    rtt

cmdtbl: .word boot-.,help-.,lights-.,chaser-.,odt-.
banner: .asciz 'Paul Nankervis - paulnank@hotmail.com'<15><12><15><12>
prompt: .asciz 'Boot> '
hlpmsg: .ascii 'Commands are BOOT, HELP, LIGHTS, CHASER, ODT'<15><12>
        .ascii 'Boot devices are RK RL RP TM or PR'<15><12>
        .asciz 'eg. Boot> BOOT RP1'<15><12><15><12>
eol:    .byte 15,12,0
del:    .byte 10,40,10,0;
cmdlst: .asciz 'BOOT'
        .asciz 'HELP'
        .asciz 'LIGHTS'
        .asciz 'CHASER'
        .asciz 'ODT'
        .byte 0
unkmsg: .asciz 'Valid commands are BOOT, HELP, LIGHTS, CHASER, ODT'<12><15>
badboo: .asciz 'Valid boot devices are RK RL RP TM and PR eg rk0'<12><15>

        .even

help:
    lda #hlpmsg,r0      ;help message
    jsr pc,print
    rts pc

chaser:
    mov #1,r0
    rol r0
    reset               ;loop forever chasing the light
    br .-4

mmr0=177572             ;memory management control registers
mmr1=177574
mmr2=177576
mmr3=172516
mmrk=172300
mmrs=172200
mmru=177600
modes=4 ;page address register table size

lights:
    clr @#mmr0          ;turn off mmu
    lda #mmupar,r5      ;get mmu page address register table
    mov #modes,r4       ;number of table entries
10$:mov (r5)+,r3        ;get page address register base for mode
    bpl 20$             ;skip dummy entry for illegal mode
    clr r1              ;set base virtual relocation address to 0
    mov r3,r2           ;pass page register address to subroutine
    jsr pc,90$          ;initialize all map pdr & par registers for mode
    mov #177600,76(r3)  ;point last d page (8) to i/o space
20$:sob r4,10$          ;repeat for all modes
    mov #7,@#mmr3       ;set mmu for 18 bit addressing with split i/d
    mov #1,@#mmr0       ;enable memory mapping

    mov #4000,r0        ;relocation address for light virtual code (upper mem somewhere)
    mov r0,@#mmrs+44    ;super mode page 2 i relocation base (becomes i virtual #40000)
    mov r0,@#mmrs+64    ;super mode page 2 d relocation base
    bic #030000,@#psw   ;clear previous mode in psw
    bis #010000,@#psw   ;set pm to super
    mov #40200,r3       ;target virtual address for code (allowing 200 for data)
    lda #vcode,r2       ;where we get virtual code
    lda #vcoded,r0      ;end of virtual code
30$:mov (r2)+,-(sp)     ;get a word of code
    mtpi (r3)+          ;push into super space
    cmp r2,r0           ;push all code to target space
    blo 30$             ;until done

    mov #40200,-(sp)
    mtpi sp             ;set super sp
    bis #030000,@#psw
    mov #40140,-(sp)
    mtpi sp             ;set user sp (no further sp handling needed)
    mov #40200,@#240    ;start address for super pc
    mov #054040,@#242   ;super mode will use alternate registers
    mov #1000,@#pir     ;call #40200 in super mode at priority 1 using pir
    rts pc              ;our work here is done

90$:mov #8.,r0          ;subroutine to set up mapping pdr/par registers at r2 with r1 base address
95$:mov r1,60(r2)       ;load d par
    mov r1,40(r2)       ;load i par
    mov #77406,20(r2)   ;load d pdr as full length read/write page
    mov #77406,(r2)+    ;load i pdr
    add #200,r1         ;step base address
    sob r0,95$          ;repeat
    rts pc

;this code is copied to the target mode virtual address #40200 (on page 2)
;virtual addresses #40000 to #40101 reserved for wait & jmp instructions
vcode:
    clr @#pir           ;turn off pir
    bic #340,@#psw      ;lower priority
    mov #37,r0          ;load initial display pattern (r0 displays in console data paths)
    mov #174000,r1      ;load initial address pattern (r1 displays as the virtual address
                        ;                              of an instruction following a wait)

10$:mov @#psw,r3        ;get current psw
    jsr pc,ps2par       ;convert r3 psw to mmu page register base in r2
    mov r2,r5           ;store result

    mov r1,r2           ;get address to display
    sub #2,r2           ;compute address of wait instruction
    mov r2,r3           ;copy address to make offset
    bic #177701,r3      ;make 6 bit page offset (without low bit!)
    mov #0000001,40000(r3)  ;write wait instruction
    mov #0000113,40002(r3)  ;write jmp (r3) instruction

    mov r2,r3           ;make relocation base for wait/jmp
    bic #160077,r3      ;from 7 middle address bits
    ash #-6,r3          ;move into position
    mov 44(r5),r4       ;get existing i page 2 base
    sub r3,r4           ;calculate new relocation base for wait/jmp

    ash #-12.,r2        ;3 top bits of wait address are wait page
    bic #177761,r2      ;convert to word index
    mov r1,r3           ;address for jmp instruction (2 after wait)
    ash #-12.,r3        ;3 top bits are jmp page number
    bic #177761,r3      ;convert to word index
    cmp r3,r2           ;both on same page?
    beq 20$             ;yes jmp doesn't need own par
    add r5,r3           ;address of jmp mmu par
    mov r4,40(r3)       ;set relocation base for jmp i page
20$:add r5,r2           ;address of wait mmu par
    mov r4,40(r2)       ;set relocation base for wait i page

    mov r1,r2           ;get address to display
    sub #2,r2           ;compute address of wait instruction
    bic #1,r2           ;no odd instruction addresses please :-(
    lda #32$,r3         ;put jmp return address into r3
    mov #3,r4           ;repeat count
30$:jmp (r2)            ;jmp to wait
32$:sob r4,30$          ;jmp (r3) comes back here

    bit #1,@#consol     ;change rotation directon on switch bit zero
    bne 40$
    rol r1              ;rotate pattern anticlockwise
    ror r0
    adc r1
    br 50$
40$:rol r0              ;rotate pattern clockwise
    ror r1
    adc r0

50$:cmp r0,#37          ;check if start of pattern
    bne 10$             ;if not we are done


    bit #2,@#consol     ;don't change CPU mode if switch bit one
    bne 60$

    mov @#psw,r3        ;get current psw
    jsr pc,ps2par       ;convert r3 psw to mmu page register base in r2
    mov 44(r2),r5       ;get current mode i page 2 relocation base
    add #040000,r3      ;increment cpu mode
    bpl 55$
    bis #040000,r3      ;skip illegal mode 2
55$:jsr pc,ps2par       ;convert new r3 psw to mmu page register base in r2
    mov r5,64(r2)       ;set new mode d page 2 relocation base
    mov r5,44(r2)       ;set new mode i page 2 relocation base
    mov r3,@#psw        ;set new mode


60$:bit #4,@#consol     ;don't fiddle with physical addressing if switch bit two
    beq 70$
65$:br  10$             ;stepping stone for code below which has a branch too far

70$:mov @#psw,r3        ;get current psw
    jsr pc,ps2par       ;convert r3 psw to mmu page register base in r2
    mov 44(r2),r5       ;get current mode i page 2 relocation base

    ccc                 ;0 fill
    ror r5              ;rotate relocation base right
    bic #077,r5         ;test for as far down as we dare go
    bne 85$             ;if still ok use it

    bit #10,@#consol    ;don't adjust 18/22 addressing if switch bit four
    bne 80$
    mov #20,r3          ;mmr3 22 bit mask
    xor r3,@#mmr3       ;toggle 18/22 bit addressing

80$:mov #4000,r5        ;assume an 18 bit relocation address
    bit #20,@#mmr3      ;ok if in 18 bit mode
    beq 85$
    mov #100000,r5      ;use a bigger relocation address for 22 bit

85$:mov r5,62(r2)       ;set the relocation base for d page 1 (output target area)
    lda #vcoded,r3      ;get code end address (somewhere in page 2)
    sub #40000,r3       ;convert to byte count from page 2 start
    asr r3              ;then word count
    mov #20000,r4       ;begin at the start address of page 1
90$:mov 20000(r4),(r4)+ ;copy a word from page 2 to page 1
    sob r3,90$          ;repeat

    mov r5,64(r2)       ;set mode d page 2 relocation base
    mov r5,44(r2)       ;set mode i page 2 relocation base
    br 65$              ;our work here is done


mmupar: .word mmrk,mmrs,1,mmru  ; mmu page address register table by mode (note entry for illegal mode)
ps2par:                 ;cobroutine to convert psw (r3) to mmu page register base address (r2)
    mov r3,r2           ;don't clobber r3!
    ash #-13.,r2        ;shift psw mode to bits 2 and 1
    bic #177771,r2      ;clear other junk
    add pc,r2           ;get relative address of
    add #mmupar-.,r2    ;page address register table entry
    mov (r2),r2         ;return mmu page register base for psw in r2
    rts pc              ;done

vcoded:                 ;end of virtual mode code

bootbl: .word bootrk-.,bootrl-.,bootrp-.,boottm-.,bootpt-.
boolst: .ascii 'RKRLRPTMPR'
        .word 0
boount: .word 5, 3, 4, 3, 0
boot:
10$:movb (r2)+,r4
    cmpb r4,#40
    beq 10$             ;ignore leading spaces
    tstb r4
    beq 80$             ;must have a char
    movb (r2)+,r0
    beq 80$             ;must have two
    swab r0
    bis r0,r4           ;combine two characters (ie rk, rl..)

    clr r3              ;unit
20$:movb (r2)+,r0
    beq 30$
    sub #'0,r0
    cmpb r0,#7
    bhi 80$
    ash #3,r3
    bisb r0,r3          ;get any unit number digits
    br 20$

30$:clr r2              ;name index
    lda #boolst,r0
40$:mov (r0)+,r1        ;get bootname
    beq 80$
    cmp r1,r4           ;match?
    beq 50$
    add #2,r2
    br 40$

50$:lda #boount,r0
    add r2,r0
    cmp r3,(r0)
    bgt 80$             ;unit out of range

    reset
    lda #bootbl,r0      ;execute command routine at r2 offset
    add r0,r2
    add (r2),r2
    jsr pc,(r2)
    br 90$

80$:lda #badboo,r0      ;complain we don't know boot device
    jsr pc,print

90$:rts pc

rlcs=174400
bootrl:
    swab r3         ; unit number
    mov #rlcs,r0    ; csr
    mov #13,4(r0)   ; seek
    bis #4,r3       ; unit+gstat
    mov r3,(r0)     ; issue cmd
    tstb (r0)       ; wait
    bpl .-2
    clr 2(r0)       ; clr ba
    clr 4(r0)       ; clr da
    mov #-512.,6(r0) ; set wc
    clrb r3
    bis #14,r3      ; unit+read
    mov r3,(r0)     ; issue cmd
    tstb (r0)       ; wait
    bpl .-2
    clr pc

rkda=177412
bootrk:
    mov #rkda,r0    ; csr
    ash #13.,r3     ; unit # into da
    mov r3,(r0)     ; load da
    clr -(r0)       ; clear ba
    mov #-256.*2,-(r0) ; load wc
    mov #5,-(r0)    ; read & go
    tstb (r0)
    bpl .-2
    clr pc

rpcsr=0176700
bootrp:
    mov #rpcsr, r1
    mov #40, 10(r1)      ; reset
    mov r3, 10(r1)       ; set unit
    mov #0000021, (r1)   ; pack ack
    mov #0010000, 32(r1) ; 16b mode
    mov #-512., 2(r1)    ; set wc
    clr 4(r1)            ; clr ba
    clr 6(r1)            ; clr da
    clr 34(r1)           ; clr cyl
    mov #0000071, (r1)   ; read
    tstb (r1)            ; wait
    bpl .-2
    clrb (r1)
    mov r3,r0            ;required for BSD
    clr pc


mtcma=0172526
boottm:
    mov r3, r0          ; unit
    mov #mtcma, r1      ; mtcma
    clr (r1)
    mov #-1, -(r1)      ; mtbrc
    mov r0,r2
    swab r2
    add #60011, r2
    mov r2, -(r1)       ; space + go
    tstb (r1)           ; mtc
    bpl .-2
    mov r0,r2
    swab r2
    add #60003, r2
    mov r2, (r1)        ; read + go
    tstb (r1)           ; mtc
    bpl .-2
    clr pc

;Paper tape boot routine using RT11 LDA format
;Input format:
;Frame
;  1    001
;  2    000
;  3    Low order byte count    (Includes all except checksum,
;  4    High order byte count       even the 001 000.)
;  5    Low order load address
;  6    High order load address
;  7..  Data bytes
;  XXX  Checksum    (Includes all the block - even the 001)
;
;The checksum is calculated such that when all the bytes have
;been added up, the low byte of the sum will be zero.
;
;If the byte count is 6, the load address specified will be
;taken to be the start address of the program. If the address
;is even the program will be started, otherwise ODT will be
;re-entered.  If (count > 6), the data block will be loaded.
;
;This is the format used by DEC for paper tapes, and can be
;produced using the RT-11 LINK/LDA command.

;Register use:
; R0 - input byte       R1 - checksum
; R2 - load address     R3 - byte count
; R4 - start address flag

ptrcsr = 177550 ;Address of reader device

pterr:.asciz 'Paper tape checksum error'<15><12>
ptnost:.asciz 'Paper tape has no start address'<15><12>
.even

bootpt:
10$:clr r1              ;Initialize checksum
    jsr pc,getch
    cmpb r0,#1          ;Read until start of frame
    bne 10$
    jsr pc,getch
    tstb r0             ;Byte after start must be zero
    bne 10$

    jsr pc,getwd
    mov r2,r3           ;Get byte count in R3
    jsr pc,getwd        ;Get load address in R2
    add @#consol,r2     ;Add switches for relocation

    sub #6,r3
    mov r3,r4           ;Flag whether there is data
    ble 40$             ;If no data then must be a start address

30$:jsr pc,getch
    movb r0,(r2)+       ;Put byte into memory
    sob r3,30$

40$:jsr pc,getch
    tstb r1             ;Verify checksum
    bne chkerr

    tst r4
    bgt 10$             ;If that frame contained data go get more

    tst r2
    beq nostrt          ;If load address null then don't start
    bit #1,r2
    bne nostrt          ;If load address odd then don't start

    jmp (r2)            ;See what happens

getwd:                  ;Get a word from reader in R2
    jsr pc,getch
    mov r0,r2           ;Low order
    jsr pc,getch
    swab r0
    bis r0,r2           ;Hi order
    rts pc

getch:                  ;Get a character from reader in R0
    mov #ptrcsr,r0      ;Reader device
    mov #1,(r0)         ;Start reader
1$: tstb (r0)
    bpl 1$              ;Wait for a character
    movb 2(r0),r0       ;Get it
    bic #177400,r0
    add r0,r1           ;Accumulate checksum
    rts pc

chkerr:
    lda #pterr,r0
    br ptend

nostrt:
    lda #ptnost,r0
ptend:
    jsr pc,print
    rts pc

end: .end start
